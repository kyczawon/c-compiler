21.02 At the beginning we want to create the translator that will work for the main function and nothing else. Once we have one translation working we will expand to more. We plan to use the Object oriented structure used in labs.
6.03 We intend to set up a code_gen structure in the parser for all things that are already parsed. Then be able to compile a simple funciton from start to finish. Globals will be implemented as static variables inside the node that can be accessed from anywhere.
10.03 We intend to make set up bindings by linking children to their parents nodes and the child could call the parent to see if it knows about a binding. If there was no parent that means the global scope was reached.
21.03 Our plan to implement the bindings with parent pointers is completely wrong - it would be way to hard to differentiate between scopes and makes some compiling impossible. After having a meeting with the GTA we have decided to go with a functional approach - where the context will be passed down the hierarchy. We were also confused by lab 2 a bit, where evaluation is implemented. Therefore, we were trying to implement both compilation and evaluation at the same time forgetting that evaluation is actually done by the processor. Meeting the GTA was definetely useful and altough we wasted at least 10 hours of work, we were able to save a lot of struggles.
25.03 Altough we have discussed saving all results of operations to memory before proceeding to the next operation, we have still implemented an approach were results were stored to registers and each time a new register was used the register value would be incremented. The register value would be reset at the end of each statement. This works only for statements with a few operations in them, as the more operations the more registers are used and eventually a register that doesn't exist is being called. To solve this we will need to rewrite our code so that lw and sw instuctions are used at each operation.
28.03 Our approach has turned out great and now new things can be implemented to the structue easily
29.03 We forgot that declarations can be a list (a lot declaration on one line) and as a result had to rethink our declaration structure to have a sequencing pattern.
30.03 We are very proud of our compiler and think that the amount of work we put in has paid off - it thought us a lot about compilation and programming
